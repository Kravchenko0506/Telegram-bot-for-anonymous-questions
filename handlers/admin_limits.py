"""
Admin Limits Management System

A comprehensive system for managing bot limits and restrictions through
admin commands. This module provides commands for viewing and updating
various bot limits.

Features:
- Limit viewing
- Limit updating
- Value validation
- Error handling
- User feedback
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from config import ADMIN_ID, ERROR_ADMIN_ONLY
from models.settings import SettingsManager
from utils.logger import get_admin_logger

router = Router()
logger = get_admin_logger()


@router.message(Command("limits"))
async def limits_command(message: Message):
    """Show current limits and restrictions."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    try:
        # Get current values from DB
        rate_limit = await SettingsManager.get_rate_limit_per_hour()
        cooldown = await SettingsManager.get_rate_limit_cooldown()
        max_question = await SettingsManager.get_max_question_length()
        max_answer = await SettingsManager.get_max_answer_length()
        per_page = await SettingsManager.get_questions_per_page()
        max_pages = await SettingsManager.get_max_pages_to_show()

        limits_text = f"""
‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>

üìä <b>–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
- –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {rate_limit}
- –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏: {cooldown} —Å–µ–∫
- –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: {max_question} —Å–∏–º–≤–æ–ª–æ–≤
- –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {max_answer} —Å–∏–º–≤–æ–ª–æ–≤

üìÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:</b>
- –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {per_page}
- –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages}

üí° <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>
- /set_rate_limit <—á–∏—Å–ª–æ> - –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å (1-100)
- /set_cooldown <—Å–µ–∫—É–Ω–¥—ã> - –∑–∞–¥–µ—Ä–∂–∫–∞ (0-3600)
- /set_max_question <–¥–ª–∏–Ω–∞> - –º–∞–∫—Å. –≤–æ–ø—Ä–æ—Å (10-10000)
- /set_max_answer <–¥–ª–∏–Ω–∞> - –º–∞–∫—Å. –æ—Ç–≤–µ—Ç (10-10000)
- /set_per_page <—á–∏—Å–ª–æ> - –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-50)
- /set_max_pages <—á–∏—Å–ª–æ> - –º–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü (10-1000)
"""
        await message.answer(limits_text)
        logger.info(f"Admin {message.from_user.id} viewed limits")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.error(f"Error getting limits: {e}")


@router.message(Command("set_rate_limit"))
async def set_rate_limit_command(message: Message):
    """Set questions per hour limit."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_rate_limit_per_hour()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: <b>{current}</b> –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_rate_limit <i>—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_rate_limit_per_hour(new_value):
            await message.answer(
                f"‚úÖ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value} –≤ —á–∞—Å"
            )
            logger.info(f"Admin updated rate limit to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 1-100")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("set_cooldown"))
async def set_cooldown_command(message: Message):
    """Set cooldown between questions."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_rate_limit_cooldown()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: <b>{current}</b> —Å–µ–∫—É–Ω–¥\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_cooldown <i>—Å–µ–∫—É–Ω–¥—ã –æ—Ç 0 –¥–æ 3600</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_rate_limit_cooldown(new_value):
            await message.answer(
                f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value} —Å–µ–∫—É–Ω–¥"
            )
            logger.info(f"Admin updated cooldown to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 0-3600 —Å–µ–∫—É–Ω–¥")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("set_max_question"))
async def set_max_question_command(message: Message):
    """Set maximum question length."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_max_question_length()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: <b>{current}</b> —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_max_question <i>–¥–ª–∏–Ω–∞ –æ—Ç 10 –¥–æ 10000</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_max_question_length(new_value):
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            logger.info(f"Admin updated max question length to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 10-10000")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("set_max_answer"))
async def set_max_answer_command(message: Message):
    """Set maximum answer length."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_max_answer_length()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π –º–∞–∫—Å–∏–º—É–º: <b>{current}</b> —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_max_answer <i>–¥–ª–∏–Ω–∞ –æ—Ç 10 –¥–æ 10000</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_max_answer_length(new_value):
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value} —Å–∏–º–≤–æ–ª–æ–≤"
            )
            logger.info(f"Admin updated max answer length to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 10-10000")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("set_per_page"))
async def set_per_page_command(message: Message):
    """Set questions per page."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_questions_per_page()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}</b> –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_per_page <i>—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_questions_per_page(new_value):
            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}"
            )
            logger.info(f"Admin updated questions per page to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 1-50")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("set_max_pages"))
async def set_max_pages_command(message: Message):
    """Set maximum pages to show."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        current = await SettingsManager.get_max_pages_to_show()
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}</b> —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"
            "üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "/set_max_pages <i>—á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 1000</i>"
        )
        return

    try:
        new_value = int(args[1])
        if await SettingsManager.set_max_pages_to_show(new_value):
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}"
            )
            logger.info(f"Admin updated max pages to: {new_value}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: 10-1000")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


@router.message(Command("reset_limits"))
async def reset_limits_command(message: Message):
    """Reset all limits to default values."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    try:
        # Reset to values from config.py
        from config import (
            RATE_LIMIT_QUESTIONS_PER_HOUR,
            RATE_LIMIT_COOLDOWN_SECONDS,
            MAX_QUESTION_LENGTH,
            MAX_ANSWER_LENGTH,
            QUESTIONS_PER_PAGE,
            MAX_PAGES_TO_SHOW
        )

        await SettingsManager.set_rate_limit_per_hour(RATE_LIMIT_QUESTIONS_PER_HOUR)
        await SettingsManager.set_rate_limit_cooldown(RATE_LIMIT_COOLDOWN_SECONDS)
        await SettingsManager.set_max_question_length(MAX_QUESTION_LENGTH)
        await SettingsManager.set_max_answer_length(MAX_ANSWER_LENGTH)
        await SettingsManager.set_questions_per_page(QUESTIONS_PER_PAGE)
        await SettingsManager.set_max_pages_to_show(MAX_PAGES_TO_SHOW)

        await message.answer(
            "‚úÖ –í—Å–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /limits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        logger.info("Admin reset all limits to defaults")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.error(f"Error resetting limits: {e}")
