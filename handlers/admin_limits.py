"""
Admin Limits Management System

A comprehensive system for managing bot limits and restrictions through
admin commands. This module provides commands for viewing and updating
various bot limits.

Features:
- Limit viewing
- Limit updating
- Value validation
- Error handling
- User feedback
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from config import ADMIN_ID, ERROR_ADMIN_ONLY
from models.settings import SettingsManager
from utils.logging_setup import get_logger

router = Router()
logger = get_logger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏
LIMIT_COMMANDS = {
    "rate_limit": {
        "command": "set_rate_limit",
        "getter": SettingsManager.get_rate_limit_per_hour,
        "setter": SettingsManager.set_rate_limit_per_hour,
        "range": (1, 100),
        "unit": "",
        "name": "–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤",
        "description": "–≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å"
    },
    "cooldown": {
        "command": "set_cooldown",
        "getter": SettingsManager.get_rate_limit_cooldown,
        "setter": SettingsManager.set_rate_limit_cooldown,
        "range": (0, 3600),
        "unit": "—Å–µ–∫",
        "name": "–ó–∞–¥–µ—Ä–∂–∫–∞",
        "description": "—Å–µ–∫—É–Ω–¥"
    },
    "max_question": {
        "command": "set_max_question",
        "getter": SettingsManager.get_max_question_length,
        "setter": SettingsManager.set_max_question_length,
        "range": (10, 10000),
        "unit": "—Å–∏–º–≤–æ–ª–æ–≤",
        "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞",
        "description": "—Å–∏–º–≤–æ–ª–æ–≤"
    },
    "max_answer": {
        "command": "set_max_answer",
        "getter": SettingsManager.get_max_answer_length,
        "setter": SettingsManager.set_max_answer_length,
        "range": (10, 10000),
        "unit": "—Å–∏–º–≤–æ–ª–æ–≤",
        "name": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞",
        "description": "—Å–∏–º–≤–æ–ª–æ–≤"
    },
    "per_page": {
        "command": "set_per_page",
        "getter": SettingsManager.get_questions_per_page,
        "setter": SettingsManager.set_questions_per_page,
        "range": (1, 50),
        "unit": "",
        "name": "–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
        "description": "–≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    },
    "max_pages": {
        "command": "set_max_pages",
        "getter": SettingsManager.get_max_pages_to_show,
        "setter": SettingsManager.set_max_pages_to_show,
        "range": (10, 1000),
        "unit": "",
        "name": "–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü",
        "description": "—Å—Ç—Ä–∞–Ω–∏—Ü"
    }
}


@router.message(Command("limits"))
async def limits_command(message: Message):
    """Show current limits and restrictions."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    try:
        # Get current values from DB
        rate_limit = await SettingsManager.get_rate_limit_per_hour()
        cooldown = await SettingsManager.get_rate_limit_cooldown()
        max_question = await SettingsManager.get_max_question_length()
        max_answer = await SettingsManager.get_max_answer_length()
        per_page = await SettingsManager.get_questions_per_page()
        max_pages = await SettingsManager.get_max_pages_to_show()

        commands_list = "\n".join(
            f"- /{config['command']} –ó–Ω–∞—á–µ–Ω–∏–µ - {config['description']} "
            f"({config['range'][0]}-{config['range'][1]})"
            for config in LIMIT_COMMANDS.values()
        )

        limits_text = f"""
‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>

üìä <b>–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
- –í–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {rate_limit}
- –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏: {cooldown} —Å–µ–∫
- –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: {max_question} —Å–∏–º–≤–æ–ª–æ–≤
- –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {max_answer} —Å–∏–º–≤–æ–ª–æ–≤

üìÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:</b>
- –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {per_page}
- –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages}

üí° <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>
{commands_list}
"""
        await message.answer(limits_text)
        logger.info(f"Admin {message.from_user.id} viewed limits")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.error(f"Error getting limits: {e}")


async def handle_set_command(message: Message, config: dict):
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–æ–≤."""
    args = message.text.split(maxsplit=1)
    min_val, max_val = config["range"]
    unit = config["unit"]
    
    if len(args) < 2:
        current = await config["getter"]()
        unit_text = f" {unit}" if unit else ""
        await message.answer(
            f"‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current}{unit_text}</b>\n\n"
            f"üìù –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            f"/{config['command']} –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {min_val} –¥–æ {max_val}"
        )
        return

    try:
        new_value = int(args[1])
        if await config["setter"](new_value):
            unit_text = f" {unit}" if unit else ""
            await message.answer(
                f"‚úÖ {config['name']} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}{unit_text}"
            )
            logger.info(f"Admin updated {config['command']} to: {new_value}")
        else:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ø—É—Å—Ç–∏–º–æ: {min_val}-{max_val}")
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
for key, config in LIMIT_COMMANDS.items():
    command = config["command"]
    
    @router.message(Command(command))
    async def set_command_handler(message: Message, config=config):
        if message.from_user.id != ADMIN_ID:
            await message.answer(ERROR_ADMIN_ONLY)
            return
        await handle_set_command(message, config)


@router.message(Command("reset_limits"))
async def reset_limits_command(message: Message):
    """Reset all limits to default values."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return

    try:
        # Reset to values from config.py
        from config import (
            RATE_LIMIT_QUESTIONS_PER_HOUR,
            RATE_LIMIT_COOLDOWN_SECONDS,
            MAX_QUESTION_LENGTH,
            MAX_ANSWER_LENGTH,
            QUESTIONS_PER_PAGE,
            MAX_PAGES_TO_SHOW
        )

        await SettingsManager.set_rate_limit_per_hour(RATE_LIMIT_QUESTIONS_PER_HOUR)
        await SettingsManager.set_rate_limit_cooldown(RATE_LIMIT_COOLDOWN_SECONDS)
        await SettingsManager.set_max_question_length(MAX_QUESTION_LENGTH)
        await SettingsManager.set_max_answer_length(MAX_ANSWER_LENGTH)
        await SettingsManager.set_questions_per_page(QUESTIONS_PER_PAGE)
        await SettingsManager.set_max_pages_to_show(MAX_PAGES_TO_SHOW)

        await message.answer(
            "‚úÖ –í—Å–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /limits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        logger.info("Admin reset all limits to defaults")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.error(f"Error resetting limits: {e}")