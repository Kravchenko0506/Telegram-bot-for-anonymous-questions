"""Admin handlers.

Provides:
    * Inline callbacks (pagination, question actions, bulk delete)
    * Question lists: pending / favorites / answered
    * Commands: admin, pending, favorites, answered, stats, settings, backup*, health

Goal: concise, readable, low‚Äëduplication code.
"""

from __future__ import annotations

from aiogram import Router, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from datetime import datetime
from sqlalchemy import select, func
import math

from config import (
    ADMIN_ID,
    ERROR_ADMIN_ONLY,
    SUCCESS_ADDED_TO_FAVORITES,
    SUCCESS_REMOVED_FROM_FAVORITES,
    SUCCESS_QUESTION_DELETED,
    ERROR_QUESTION_NOT_FOUND,
    SUCCESS_SETTING_UPDATED,
    ERROR_SETTING_UPDATE,
    ERROR_INVALID_VALUE,
    BOT_USERNAME,
    QUESTIONS_PER_PAGE,
    BACKUP_RECIPIENT_ID,
)
from models.database import async_session
from models.questions import Question
from keyboards.inline import (
    get_admin_question_keyboard,
    get_favorite_question_keyboard,
    get_answered_question_keyboard,
    get_stats_keyboard,
    get_clear_confirmation_keyboard,
    get_pagination_keyboard,
)
from utils.logging_setup import get_logger
from handlers.admin_states import start_answer_mode, cancel_answer_mode
from models.settings import SettingsManager
from utils.runtime import uptime, format_timedelta
from utils.time_helper import format_admin_time
from typing import Dict

router = Router()
logger = get_logger(__name__)


# Inline callback handling
async def handle_question_action(callback: CallbackQuery, action: str, qid: int) -> bool:
    """Execute a single question action; return True if handled."""
    async with async_session() as session:
        question = await session.get(Question, qid)
        if not question or question.is_deleted:
            await callback.answer(ERROR_QUESTION_NOT_FOUND, show_alert=True)
            return True
        if action == "answer":
            await start_answer_mode(callback, qid, question)
            return True
        if action == "favorite":
            question.is_favorite = not question.is_favorite
            await session.commit()
            await callback.answer(
                SUCCESS_ADDED_TO_FAVORITES if question.is_favorite else SUCCESS_REMOVED_FROM_FAVORITES
            )
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=get_admin_question_keyboard(
                        qid, is_favorite=question.is_favorite)
                )
            except Exception:
                pass
            return True
        if action == "remove_favorite":
            question.is_favorite = False
            await session.commit()
            await callback.answer("‚≠ê –£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            try:
                await callback.message.edit_text(
                    f"‚≠ê <s>{(callback.message.text or '').strip()}</s>\n\n<i>–£–±—Ä–∞–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ</i>",
                    reply_markup=None,
                )
            except Exception:
                pass
            return True
        if action == "delete":
            question.is_deleted = True
            question.deleted_at = datetime.utcnow()
            await session.commit()
            await callback.answer(SUCCESS_QUESTION_DELETED)
            try:
                orig = callback.message.text or ""
                await callback.message.edit_text(
                    f"üóëÔ∏è <s>{orig}</s>\n\n<i>–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω</i>", reply_markup=None
                )
            except Exception:
                pass
            return True
    return False


@router.callback_query(lambda c: c.from_user.id == ADMIN_ID)
async def admin_question_callback(callback: CallbackQuery) -> None:  # noqa: C901
    """Admin inline entrypoint: pagination / bulk clear / question actions."""
    try:
        data = callback.data or ""

    # Pagination
        if data.startswith(("pending_page:", "favorites_page:", "answered_page:")):
            prefix, raw_page = data.split(":", 1)
            try:
                page = int(raw_page)
            except ValueError:
                await callback.answer("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞", show_alert=True)
                return
            list_type = prefix.replace("_page", "")
            await show_questions_page(callback.message, list_type, page, edit_message=True)
            await callback.answer()
            return

    # Bulk delete flow
        if data == "clear_all_questions":
            await callback.message.edit_text(
                "‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï –≤–æ–ø—Ä–æ—Å—ã? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
                reply_markup=get_clear_confirmation_keyboard(),
            )
            return
        if data == "confirm_clear_all":
            await handle_clear_all_questions(callback)
            return
        if data == "cancel_clear":
            await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
            await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return

    # Action format: action:ID
        if ":" not in data:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return
        action, raw_id = data.split(":", 1)
        try:
            qid = int(raw_id)
        except ValueError:
            await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
            return

        if action == "cancel_answer":
            await cancel_answer_mode(callback)
            return
        if not await handle_question_action(callback, action, qid):
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
    except Exception as e:  # pragma: no cover - defensive
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"admin callback error: {e}")


# Question list rendering
async def show_questions_page(
    message: Message,
    list_type: str,
    page: int = 0,
    edit_message: bool = False,
) -> None:
    """Render one page of a question list: pending | favorites | answered."""
    try:
        async with async_session() as session:
            filters = [Question.is_deleted.is_(False)]
            if list_type == "pending":
                filters += [Question.answer.is_(None),
                            Question.is_favorite.is_(False)]
                title = "‚è≥ <b>–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ</b>"
                kb_type = "pending"
                order_by = [Question.created_at.desc()]
            elif list_type == "favorites":
                filters += [Question.is_favorite.is_(True)]
                title = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ</b>"
                kb_type = "favorites"
                order_by = [Question.created_at.desc()]
            elif list_type == "answered":
                filters += [Question.answer.is_not(None)]
                title = "‚úÖ <b>–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ</b>"
                kb_type = "answered"
                order_by = [Question.answered_at.desc(),
                            Question.created_at.desc()]
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–∏—Å–∫–∞")
                return

            total_q = (await session.execute(select(func.count(Question.id)).where(*filters))).scalar() or 0
            if total_q == 0:
                empty_map = {
                    "pending": "‚è≥ –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    "favorites": "‚≠ê –ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    "answered": "‚úÖ –ù–µ—Ç –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                }
                txt = empty_map[list_type]
                if edit_message:
                    await message.edit_text(txt, reply_markup=None)
                else:
                    await message.answer(txt)
                return

            total_pages = math.ceil(total_q / QUESTIONS_PER_PAGE)
            page = max(0, min(page, total_pages - 1))
            offset = page * QUESTIONS_PER_PAGE
            rows = (
                (await session.execute(
                    select(Question)
                    .where(*filters)
                    .order_by(*order_by)
                    .offset(offset)
                    .limit(QUESTIONS_PER_PAGE)
                ))
                .scalars()
                .all()
            )
            # Extract primitives to avoid accessing detached instances & None surprises
            qs = [
                {
                    "id": q.id,
                    "text": q.text if isinstance(q.text, str) else "",
                    "answer": q.answer if isinstance(q.answer, str) else None,
                    "is_favorite": bool(q.is_favorite),
                    "created_at": q.created_at,
                    "answered_at": q.answered_at,
                }
                for q in rows
            ]

        header = f"{title}\n\nüìä –°—Ç—Ä. {page + 1}/{total_pages} | –í—Å–µ–≥–æ: {total_q}"
        top_kb = (
            get_pagination_keyboard(page, total_pages, f"{list_type}_page")
            if total_pages > 1
            else None
        )
        if edit_message:
            await message.edit_text(header, reply_markup=top_kb)
        else:
            await message.answer(header, reply_markup=top_kb)

        for q in qs:
            created = format_admin_time(q["answered_at"] or q["created_at"])
            text = q["text"] or "(empty)"
            if list_type == "pending":
                fav = "‚≠ê " if q["is_favorite"] else ""
                body = f"‚ùì <b>{fav}–í–æ–ø—Ä–æ—Å #{q['id']}</b>\n\n{text}\n\nüìÖ {created}"
                kb = get_admin_question_keyboard(q["id"], q["is_favorite"])
            elif list_type == "favorites":
                status = "‚úÖ –û—Ç–≤–µ—á–µ–Ω" if q["answer"] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                body = f"‚≠ê <b>–í–æ–ø—Ä–æ—Å #{q['id']}</b>\n\n{text}\n\nüìÖ {created} | {status}"
                if q["answer"]:
                    body += f"\n\nüí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{q['answer']}"
                kb = get_favorite_question_keyboard(q["id"])
            else:  # answered
                fav = "‚≠ê " if q["is_favorite"] else ""
                body = (
                    f"‚úÖ <b>{fav}–í–æ–ø—Ä–æ—Å #{q['id']}</b>\n\n{text}\n\nüìÖ {created}\n\n"
                    f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{q['answer']}"
                )
                kb = get_answered_question_keyboard(q["id"], q["is_favorite"])
            await message.answer(body, reply_markup=kb)

        if total_pages > 1:
            await message.answer(
                f"üìÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è ({page + 1}/{total_pages})",
                reply_markup=get_pagination_keyboard(
                    page, total_pages, f"{list_type}_page"),
            )
        logger.info(f"{list_type} page {page + 1}/{total_pages} ({len(qs)})")
    except Exception as e:  # pragma: no cover
        err = "‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞"
        if edit_message:
            await message.edit_text(err, reply_markup=None)
        else:
            await message.answer(err)
        logger.error(f"{list_type} list error: {e}")


async def handle_clear_all_questions(callback: CallbackQuery) -> None:
    try:
        async with async_session() as session:
            qs = (await session.execute(select(Question).where(Question.is_deleted.is_(False)))).scalars().all()
            now = datetime.utcnow()
            for q in qs:
                q.is_deleted = True
                q.deleted_at = now
            await session.commit()
        await callback.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {len(qs)}", reply_markup=None)
        await callback.answer("–ì–æ—Ç–æ–≤–æ")
        logger.warning(f"mass delete {len(qs)}")
    except Exception as e:  # pragma: no cover
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏", reply_markup=None)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"clear all error: {e}")

@router.message(Command("pending"))
async def pending_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    await show_questions_page(message, "pending")


@router.message(Command("favorites"))
async def favorites_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    await show_questions_page(message, "favorites")


@router.message(Command("answered"))
async def answered_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    await show_questions_page(message, "answered")


async def get_question_stats() -> Dict[str, int | float]:
    async with async_session() as session:
        total = (await session.execute(select(func.count(Question.id)).where(Question.is_deleted.is_(False)))).scalar() or 0
        answered = (await session.execute(select(func.count(Question.id)).where(Question.is_deleted.is_(False), Question.answer.is_not(None)))).scalar() or 0
        pending = (await session.execute(select(func.count(Question.id)).where(Question.is_deleted.is_(False), Question.answer.is_(None)))).scalar() or 0
        favs = (await session.execute(select(func.count(Question.id)).where(Question.is_deleted.is_(False), Question.is_favorite.is_(True)))).scalar() or 0
        deleted = (await session.execute(select(func.count(Question.id)).where(Question.is_deleted.is_(True)))).scalar() or 0
    rate = round((answered / total * 100), 1) if total else 0.0
    return {"total": total, "answered": answered, "pending": pending, "favs": favs, "deleted": deleted, "rate": rate}


@router.message(Command("stats"))
async def stats_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    try:
        s = await get_question_stats()
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"–í—Å–µ–≥–æ: {s['total']}\n"
            f"–û—Ç–≤–µ—á–µ–Ω–æ: {s['answered']}\n"
            f"–û–∂–∏–¥–∞—é—Ç: {s['pending']}\n"
            f"–ò–∑–±—Ä–∞–Ω–Ω—ã–µ: {s['favs']}\n"
            f"–£–¥–∞–ª–µ–Ω–æ: {s['deleted']}\n\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤: {s['rate']}%"
        )
        await message.answer(text, reply_markup=get_stats_keyboard())
    except Exception as e:  # pragma: no cover
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logger.error(f"stats error: {e}")


# Commands: settings
@router.message(Command("set_author"))
async def set_author_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        current = await SettingsManager.get_author_name()
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –∏–º—è: <b>{current}</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/set_author –ù–æ–≤–æ–µ–ò–º—è")
        return
    new_name = parts[1].strip()
    if not new_name:
        await message.answer(ERROR_INVALID_VALUE)
        return
    try:
        await SettingsManager.set_author_name(new_name)
        await message.answer(SUCCESS_SETTING_UPDATED.format(setting="–∏–º—è –∞–≤—Ç–æ—Ä–∞", value=new_name))
    except Exception as e:  # pragma: no cover
        await message.answer(ERROR_SETTING_UPDATE)
        logger.error(f"set_author error: {e}")


@router.message(Command("set_info"))
async def set_info_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        current = await SettingsManager.get_author_info()
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<b>{current}</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/set_info –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        return
    new_info = parts[1].strip()
    if not new_info:
        await message.answer(ERROR_INVALID_VALUE)
        return
    try:
        await SettingsManager.set_author_info(new_info)
        await message.answer(SUCCESS_SETTING_UPDATED.format(setting="–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", value=new_info))
    except Exception as e:  # pragma: no cover
        await message.answer(ERROR_SETTING_UPDATE)
        logger.error(f"set_info error: {e}")


@router.message(Command("settings"))
async def settings_command(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    try:
        name = await SettingsManager.get_author_name()
        info = await SettingsManager.get_author_info()
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–ò–º—è –∞–≤—Ç–æ—Ä–∞:\n{name}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{info}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å: /set_author /set_info"
        )
        await message.answer(text)
    except Exception as e:  # pragma: no cover
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        logger.error(f"settings error: {e}")


def get_questions_per_page() -> int:
    return QUESTIONS_PER_PAGE


# Backup commands
async def handle_backup_command(message: Message, bot: Bot, recipient_id: int) -> None:
    status = await message.answer("üîÑ –ë–µ–∫–∞–ø...")
    try:
        from utils.telegram_backup import create_and_send_backup
        ok = await create_and_send_backup(recipient_id, bot)
        await status.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å.")
    except Exception as e:  # pragma: no cover
        await status.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"backup error: {e}")


@router.message(Command("backup"))
async def cmd_create_backup(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    await handle_backup_command(message, bot, BACKUP_RECIPIENT_ID)


@router.message(Command("backup_me"))
async def cmd_backup_to_me(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    await handle_backup_command(message, bot, message.from_user.id)


@router.message(Command("backup_to"))
async def cmd_backup_to_user(message: Message, bot: Bot) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /backup_to USER_ID")
        return
    try:
        recipient_id = int(parts[1])
        if recipient_id <= 0:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0")
            return
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    await handle_backup_command(message, bot, recipient_id)


@router.message(Command("backup_info"))
async def cmd_backup_info(message: Message) -> None:
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    try:
        from config import BACKUP_ENABLED, BACKUP_RECIPIENT_ID, BACKUP_STORAGE_DIR
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if BACKUP_ENABLED else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        parts = ["üì¶ <b>–ë–µ–∫–∞–ø—ã</b>", f"–°—Ç–∞—Ç—É—Å: {status}"]
        if BACKUP_ENABLED:
            parts += [
                f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {BACKUP_RECIPIENT_ID}",
                f"–ö–∞—Ç–∞–ª–æ–≥: {BACKUP_STORAGE_DIR}",
                "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –ë–î, –ª–æ–≥–∏",
                "–ö–æ–º–∞–Ω–¥—ã: /backup /backup_me /backup_to /backup_info",
            ]
        else:
            parts.append("–í–∫–ª—é—á–∏—Ç—å: BACKUP_ENABLED=true")
        await message.answer("\n".join(parts))
    except Exception as e:  # pragma: no cover
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        logger.error(f"backup_info error: {e}")


@router.message(Command("health"))
async def health_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(ERROR_ADMIN_ONLY)
        return
    try:
        up = format_timedelta(uptime())
        from models.database import check_db_connection
        db_ok = await check_db_connection()
        status = (
            f"ü©∫ <b>Health</b>\n"
            f"‚è± Uptime: {up}\n"
            f"üíæ DB: {'OK' if db_ok else 'FAIL'}"
        )
        await message.answer(status)
    except Exception as e:  # pragma: no cover
        await message.answer("‚ùå Health check error")
        logger.error(f"Health command error: {e}")
