"""
Start Command Handler
"""

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.filters.command import CommandObject

from config import ADMIN_ID, WELCOME_MESSAGE_TEMPLATE, MAX_QUESTION_LENGTH, get_bot_link
from utils.logging_setup import get_logger
from models.settings import SettingsManager
from models.user_states import UserStateManager

router = Router()
logger = get_logger(__name__)

@router.message(CommandStart())
async def start_handler(message: Message, command: CommandObject):
    """Process /start command with role-based routing"""
    user_id = message.from_user.id
    unique_id = command.args if command.args else None
    
    await _log_start_event(user_id, unique_id)
    
    if user_id == ADMIN_ID:
        await _handle_admin_start(message)
    else:
        await _handle_user_start(message, user_id, unique_id)

async def _log_start_event(user_id: int, unique_id: str):
    """Log start event with tracking information"""
    log_message = f"/start from user {user_id}"
    if unique_id:
        log_message += f" with unique_id: {unique_id}"
    logger.info(log_message)

async def _handle_admin_start(message: Message):
    """Handle /start command for administrator"""
    admin_panel = _build_admin_panel()
    await message.answer(admin_panel)
    logger.info(f"Admin {message.from_user.id} accessed admin panel")

def _build_admin_panel() -> str:
    """Build administrator control panel text"""
    link = get_bot_link("channel")
    return (
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>\n\n"
        "‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "üè∑ /set_author - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞\n"
        "üìù /set_info - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
        "‚öôÔ∏è /settings - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n"
        
        "‚öñÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏:</b>\n"
        "üîß /limits - –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã\n"
        "üî¢ /set_rate_limit - –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å\n"
        "‚è± /set_cooldown - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏\n"
        "üìè /set_max_question - –º–∞–∫—Å. –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞\n"
        "üí¨ /set_max_answer - –º–∞–∫—Å. –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞\n"
        "üîÑ /reset_limits - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã\n\n"
        
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏:</b>\n"
        "‚è≥ /pending - –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚≠ê /favorites - –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚úÖ /answered - –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üìà /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        
        "üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "üì¶ /backup - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\n"
        "üë§ /backup_me - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø —Å–µ–±–µ\n"
        "üìã /backup_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–∞—Ö\n\n"
        
        "üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        "ü©∫ /health - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n\n"
        
        "üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        f"<code>{link}</code>"
    )

async def _handle_user_start(message: Message, user_id: int, unique_id: str):
    """Handle /start command for regular users"""
    # Reset user state to idle
    await UserStateManager.reset_to_idle(user_id)
    
    try:
        # Get dynamic settings from database
        author_name, author_info, max_length = await _get_user_settings()
        welcome_text = WELCOME_MESSAGE_TEMPLATE.format(
            author_name=author_name,
            author_info=author_info,
            max_length=max_length
        )
        logger.info(f"User {user_id} received welcome with dynamic settings")
    except Exception as e:
        logger.error(f"Error loading settings: {e}")
        welcome_text = _get_fallback_welcome()
        logger.warning(f"User {user_id} received fallback welcome message")
    
    await message.answer(welcome_text)
    
    # Log tracking information
    if unique_id:
        logger.info(f"User {user_id} started bot with tracking ID: {unique_id}")
    else:
        logger.info(f"User {user_id} started bot without tracking")

async def _get_user_settings() -> tuple:
    """Get dynamic settings for welcome message"""
    return (
        await SettingsManager.get_author_name(),
        await SettingsManager.get_author_info(),
        await SettingsManager.get_max_question_length()
    )

def _get_fallback_welcome() -> str:
    """Generate fallback welcome message with default values"""
    return WELCOME_MESSAGE_TEMPLATE.format(
        author_name="–ê–≤—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞",
        author_info="–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
        max_length=MAX_QUESTION_LENGTH
    )
